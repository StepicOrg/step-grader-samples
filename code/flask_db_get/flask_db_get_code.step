{"block":{"name":"code","text":"<p><strong>Flask – задание на работу с существующей БД</strong></p>\n\n<p>Этот тип задачи принимает на вход id или другое значение и ищет записи среди заранее созданной базы</p>\n\n<p>Проверка работает через имитацию гет-запроса и распечатывание ответа, полученного от представления</p>","video":null,"options":{"execution_time_limit":5,"execution_memory_limit":256,"limits":{"python3":{"time":15,"memory":256}},"code_templates":{"python3":"# class Course(db.Model):\n#    __tablename__ = \"courses\"\n#    id = db.Column(db.Integer, primary_key=True)\n#    name = db.Column(db.String, nullable=False)\n#    topic = db.Column(db.String, nullable=False)\n#    alumnus = db.Column(db.Integer, nullable=False)\n#    rating = db.Column(db.Integer, nullable=False)\n\n@app.route(\"/course/<int:course_id>\")\ndef render_course(course_id):  \n    course = db.session.query(Course).get(course_id)\n    return course.name"},"code_templates_header_lines_count":{"python3":32},"code_templates_footer_lines_count":{"python3":7},"code_templates_options":{},"samples":[["1","Введение в Python"]],"is_run_user_code_allowed":true},"subtitle_files":[],"source":{"code":"# This is a sample Code Challenge\n# Learn more: https://stepik.org/lesson/9173\n# Ask your questions via support@stepik.org\n\ndef generate():\n    return []\n\ndef check(reply, clue):\n    return reply.strip() == clue.strip()\n\n# def solve(dataset):\n#     a, b = dataset.split()\n#     return str(int(a) + int(b))","execution_time_limit":5,"execution_memory_limit":256,"samples_count":1,"templates_data":"::python3\n::header\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n    \napp = Flask(__name__)\napp.secret_key = \"randomstring\"\napp.config['SQLALCHEMY_DATABASE_URI'] = \"sqlite:///:memory:\"\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb = SQLAlchemy(app)\n\nclass Course(db.Model):\n    __tablename__ = \"courses\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String, nullable=False)\n    topic = db.Column(db.String, nullable=False)\n    rating = db.Column(db.Integer, nullable=False)\n    alumnus = db.Column(db.Integer, nullable=False)\n\ndb.create_all()\n\ncourses = []\n\ncourses.append(Course(name = \"Введение в Python\", topic=\"prog\", rating = 4.7, alumnus=105))\ncourses.append(Course(name = \"Знакомство с SQL\", topic=\"prog\",  rating = 4.2, alumnus=11))\ncourses.append(Course(name = \"Основы HTTP\",  topic=\"prog\", rating= 3.8, alumnus=999))\ncourses.append(Course(name = \"Основы vue.js\",  topic=\"prog\", rating= 4.8, alumnus=1004))\ncourses.append(Course(name = \"Дискретная математика\",  topic=\"math\", rating= 4.2, alumnus=0))\ncourses.append(Course(name = \"Архитектура ЭВМ\",  topic=\"prog\", rating= 4.4, alumnus=1004))\ncourses.append(Course(name = \"Знакомство с с++\",  topic=\"prog\", rating= 2.0, alumnus=6000))\n\ndb.session.add_all(courses)\n\n::code\n\n# class Course(db.Model):\n#    __tablename__ = \"courses\"\n#    id = db.Column(db.Integer, primary_key=True)\n#    name = db.Column(db.String, nullable=False)\n#    topic = db.Column(db.String, nullable=False)\n#    alumnus = db.Column(db.Integer, nullable=False)\n#    rating = db.Column(db.Integer, nullable=False)\n    \n@app.route(\"/course/<int:course_id>\")\ndef render_course(course_id):  \n    course = db.session.query(Course).get(course_id)\n    return course.name\n\n::footer\n        \nwith app.app_context(): \n    \n    address = \"/course/\"+input()\n    app.testing = True\n    response = app.test_client().get(address)\n    data = response.data.decode()       \n    print(data)       ","is_time_limit_scaled":true,"is_memory_limit_scaled":true,"is_run_user_code_allowed":true,"manual_time_limits":[],"manual_memory_limits":[],"test_archive":[],"test_cases":[["1","Введение в Python"]]},"subtitles":{},"tests_archive":"/api/step-sources/1123602/tests","feedback_correct":"","feedback_wrong":""},"id":"1123602","has_review":false,"time":"2020-03-08T20:40:01.762Z"}